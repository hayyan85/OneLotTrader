// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rtypes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rtypes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Serializable {

namespace {

const ::google::protobuf::Descriptor* CustROrder_ser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CustROrder_ser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CustROrder_ser_EPriceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ROrderPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ROrderPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* TradeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TradeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RUpdatePacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RUpdatePacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExtraRFields_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtraRFields_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rtypes_2eproto() {
  protobuf_AddDesc_rtypes_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rtypes.proto");
  GOOGLE_CHECK(file != NULL);
  CustROrder_ser_descriptor_ = file->message_type(0);
  static const int CustROrder_ser_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstraccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstrdestination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, norderstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstrsymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstrclorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, nquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, nlvsquantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstrlogmessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, lmtprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, bstruser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, totalexecutedqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, executedqty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, cust_cancelorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, cust_ordercategory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, pricetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, tif_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, maturity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, putcall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, instrument_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, strikeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, underlying_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, norderrecordid_),
  };
  CustROrder_ser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CustROrder_ser_descriptor_,
      CustROrder_ser::default_instance_,
      CustROrder_ser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CustROrder_ser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CustROrder_ser));
  CustROrder_ser_EPriceType_descriptor_ = CustROrder_ser_descriptor_->enum_type(0);
  ROrderPosition_descriptor_ = file->message_type(1);
  static const int ROrderPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROrderPosition, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROrderPosition, execution_price_),
  };
  ROrderPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ROrderPosition_descriptor_,
      ROrderPosition::default_instance_,
      ROrderPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROrderPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ROrderPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ROrderPosition));
  TradeUpdate_descriptor_ = file->message_type(2);
  static const int TradeUpdate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, side_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, exec_price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, datetimetime_),
  };
  TradeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TradeUpdate_descriptor_,
      TradeUpdate::default_instance_,
      TradeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TradeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TradeUpdate));
  RUpdatePacket_descriptor_ = file->message_type(3);
  static const int RUpdatePacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUpdatePacket, custord_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUpdatePacket, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUpdatePacket, tupdate_),
  };
  RUpdatePacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RUpdatePacket_descriptor_,
      RUpdatePacket::default_instance_,
      RUpdatePacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUpdatePacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RUpdatePacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RUpdatePacket));
  ExtraRFields_descriptor_ = file->message_type(4);
  static const int ExtraRFields_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraRFields, formid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraRFields, ordertype_),
  };
  ExtraRFields_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtraRFields_descriptor_,
      ExtraRFields::default_instance_,
      ExtraRFields_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraRFields, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtraRFields, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtraRFields));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rtypes_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CustROrder_ser_descriptor_, &CustROrder_ser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ROrderPosition_descriptor_, &ROrderPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TradeUpdate_descriptor_, &TradeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RUpdatePacket_descriptor_, &RUpdatePacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtraRFields_descriptor_, &ExtraRFields::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rtypes_2eproto() {
  delete CustROrder_ser::default_instance_;
  delete CustROrder_ser_reflection_;
  delete ROrderPosition::default_instance_;
  delete ROrderPosition_reflection_;
  delete TradeUpdate::default_instance_;
  delete TradeUpdate_reflection_;
  delete RUpdatePacket::default_instance_;
  delete RUpdatePacket_reflection_;
  delete ExtraRFields::default_instance_;
  delete ExtraRFields_reflection_;
}

void protobuf_AddDesc_rtypes_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014rtypes.proto\022\014Serializable\"\351\004\n\016CustROr"
    "der_ser\022\023\n\013bstrAccount\030\001 \001(\t\022\027\n\017bstrDest"
    "ination\030\002 \001(\t\022\024\n\014nOrderStatus\030\003 \001(\005\022\022\n\nb"
    "strSymbol\030\004 \001(\t\022\025\n\rbstrClOrderId\030\005 \001(\t\022\022"
    "\n\nbstrAction\030\006 \001(\t\022\014\n\004Side\030\007 \001(\t\022\021\n\tnQua"
    "ntity\030\010 \001(\005\022\024\n\014nLvsQuantity\030\t \001(\005\022\026\n\016bst"
    "rLogMessage\030\n \001(\t\022\020\n\010LmtPrice\030\013 \001(\002\022\020\n\010b"
    "strUser\030\014 \001(\t\022\030\n\020TotalExecutedQty\030\r \001(\005\022"
    "\023\n\013ExecutedQty\030\016 \001(\005\022\032\n\022cust_cancelOrder"
    "ID\030\017 \001(\t\022\032\n\022cust_orderCategory\030\020 \001(\t\022:\n\t"
    "PriceType\030\021 \001(\0162\'.Serializable.CustROrde"
    "r_ser.EPriceType\022\013\n\003TIF\030\022 \001(\t\022\020\n\010DateTim"
    "e\030\023 \001(\t\022\020\n\010strategy\030\024 \001(\t\022\020\n\010maturity\030\026 "
    "\001(\t\022\017\n\007putcall\030\027 \001(\t\022\022\n\ninstrument\030\030 \001(\t"
    "\022\023\n\013strikeprice\030\031 \001(\002\022\022\n\nunderlying\030\032 \001("
    "\t\022\026\n\016nOrderRecordId\030\033 \001(\t\"\025\n\nEPriceType\022"
    "\007\n\003Lmt\020\000\";\n\016ROrderPosition\022\020\n\010position\030\001"
    " \001(\005\022\027\n\017execution_price\030\002 \001(\002\"x\n\013TradeUp"
    "date\022\016\n\006symbol\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022"
    "\014\n\004side\030\003 \001(\t\022\016\n\006volume\030\004 \001(\005\022\022\n\nexec_pr"
    "ice\030\005 \001(\002\022\024\n\014DateTimetime\030\006 \001(\t\"\225\001\n\rRUpd"
    "atePacket\022-\n\007custOrd\030\001 \001(\0132\034.Serializabl"
    "e.CustROrder_ser\022)\n\003pos\030\002 \001(\0132\034.Serializ"
    "able.ROrderPosition\022*\n\007tupdate\030\003 \001(\0132\031.S"
    "erializable.TradeUpdate\"1\n\014ExtraRFields\022"
    "\016\n\006FormID\030\001 \001(\t\022\021\n\tOrderType\030\002 \001(\t", 1034);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rtypes.proto", &protobuf_RegisterTypes);
  CustROrder_ser::default_instance_ = new CustROrder_ser();
  ROrderPosition::default_instance_ = new ROrderPosition();
  TradeUpdate::default_instance_ = new TradeUpdate();
  RUpdatePacket::default_instance_ = new RUpdatePacket();
  ExtraRFields::default_instance_ = new ExtraRFields();
  CustROrder_ser::default_instance_->InitAsDefaultInstance();
  ROrderPosition::default_instance_->InitAsDefaultInstance();
  TradeUpdate::default_instance_->InitAsDefaultInstance();
  RUpdatePacket::default_instance_->InitAsDefaultInstance();
  ExtraRFields::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rtypes_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rtypes_2eproto {
  StaticDescriptorInitializer_rtypes_2eproto() {
    protobuf_AddDesc_rtypes_2eproto();
  }
} static_descriptor_initializer_rtypes_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* CustROrder_ser_EPriceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustROrder_ser_EPriceType_descriptor_;
}
bool CustROrder_ser_EPriceType_IsValid(int value) {
  switch(value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CustROrder_ser_EPriceType CustROrder_ser::Lmt;
const CustROrder_ser_EPriceType CustROrder_ser::EPriceType_MIN;
const CustROrder_ser_EPriceType CustROrder_ser::EPriceType_MAX;
const int CustROrder_ser::EPriceType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CustROrder_ser::kBstrAccountFieldNumber;
const int CustROrder_ser::kBstrDestinationFieldNumber;
const int CustROrder_ser::kNOrderStatusFieldNumber;
const int CustROrder_ser::kBstrSymbolFieldNumber;
const int CustROrder_ser::kBstrClOrderIdFieldNumber;
const int CustROrder_ser::kBstrActionFieldNumber;
const int CustROrder_ser::kSideFieldNumber;
const int CustROrder_ser::kNQuantityFieldNumber;
const int CustROrder_ser::kNLvsQuantityFieldNumber;
const int CustROrder_ser::kBstrLogMessageFieldNumber;
const int CustROrder_ser::kLmtPriceFieldNumber;
const int CustROrder_ser::kBstrUserFieldNumber;
const int CustROrder_ser::kTotalExecutedQtyFieldNumber;
const int CustROrder_ser::kExecutedQtyFieldNumber;
const int CustROrder_ser::kCustCancelOrderIDFieldNumber;
const int CustROrder_ser::kCustOrderCategoryFieldNumber;
const int CustROrder_ser::kPriceTypeFieldNumber;
const int CustROrder_ser::kTIFFieldNumber;
const int CustROrder_ser::kDateTimeFieldNumber;
const int CustROrder_ser::kStrategyFieldNumber;
const int CustROrder_ser::kMaturityFieldNumber;
const int CustROrder_ser::kPutcallFieldNumber;
const int CustROrder_ser::kInstrumentFieldNumber;
const int CustROrder_ser::kStrikepriceFieldNumber;
const int CustROrder_ser::kUnderlyingFieldNumber;
const int CustROrder_ser::kNOrderRecordIdFieldNumber;
#endif  // !_MSC_VER

CustROrder_ser::CustROrder_ser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CustROrder_ser::InitAsDefaultInstance() {
}

CustROrder_ser::CustROrder_ser(const CustROrder_ser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CustROrder_ser::SharedCtor() {
  _cached_size_ = 0;
  bstraccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bstrdestination_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  norderstatus_ = 0;
  bstrsymbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bstrclorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bstraction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nquantity_ = 0;
  nlvsquantity_ = 0;
  bstrlogmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lmtprice_ = 0;
  bstruser_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  totalexecutedqty_ = 0;
  executedqty_ = 0;
  cust_cancelorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cust_ordercategory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pricetype_ = 0;
  tif_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strategy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maturity_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  putcall_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instrument_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strikeprice_ = 0;
  underlying_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  norderrecordid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CustROrder_ser::~CustROrder_ser() {
  SharedDtor();
}

void CustROrder_ser::SharedDtor() {
  if (bstraccount_ != &::google::protobuf::internal::kEmptyString) {
    delete bstraccount_;
  }
  if (bstrdestination_ != &::google::protobuf::internal::kEmptyString) {
    delete bstrdestination_;
  }
  if (bstrsymbol_ != &::google::protobuf::internal::kEmptyString) {
    delete bstrsymbol_;
  }
  if (bstrclorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete bstrclorderid_;
  }
  if (bstraction_ != &::google::protobuf::internal::kEmptyString) {
    delete bstraction_;
  }
  if (side_ != &::google::protobuf::internal::kEmptyString) {
    delete side_;
  }
  if (bstrlogmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete bstrlogmessage_;
  }
  if (bstruser_ != &::google::protobuf::internal::kEmptyString) {
    delete bstruser_;
  }
  if (cust_cancelorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete cust_cancelorderid_;
  }
  if (cust_ordercategory_ != &::google::protobuf::internal::kEmptyString) {
    delete cust_ordercategory_;
  }
  if (tif_ != &::google::protobuf::internal::kEmptyString) {
    delete tif_;
  }
  if (datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetime_;
  }
  if (strategy_ != &::google::protobuf::internal::kEmptyString) {
    delete strategy_;
  }
  if (maturity_ != &::google::protobuf::internal::kEmptyString) {
    delete maturity_;
  }
  if (putcall_ != &::google::protobuf::internal::kEmptyString) {
    delete putcall_;
  }
  if (instrument_ != &::google::protobuf::internal::kEmptyString) {
    delete instrument_;
  }
  if (underlying_ != &::google::protobuf::internal::kEmptyString) {
    delete underlying_;
  }
  if (norderrecordid_ != &::google::protobuf::internal::kEmptyString) {
    delete norderrecordid_;
  }
  if (this != default_instance_) {
  }
}

void CustROrder_ser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CustROrder_ser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CustROrder_ser_descriptor_;
}

const CustROrder_ser& CustROrder_ser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtypes_2eproto();
  return *default_instance_;
}

CustROrder_ser* CustROrder_ser::default_instance_ = NULL;

CustROrder_ser* CustROrder_ser::New() const {
  return new CustROrder_ser;
}

void CustROrder_ser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bstraccount()) {
      if (bstraccount_ != &::google::protobuf::internal::kEmptyString) {
        bstraccount_->clear();
      }
    }
    if (has_bstrdestination()) {
      if (bstrdestination_ != &::google::protobuf::internal::kEmptyString) {
        bstrdestination_->clear();
      }
    }
    norderstatus_ = 0;
    if (has_bstrsymbol()) {
      if (bstrsymbol_ != &::google::protobuf::internal::kEmptyString) {
        bstrsymbol_->clear();
      }
    }
    if (has_bstrclorderid()) {
      if (bstrclorderid_ != &::google::protobuf::internal::kEmptyString) {
        bstrclorderid_->clear();
      }
    }
    if (has_bstraction()) {
      if (bstraction_ != &::google::protobuf::internal::kEmptyString) {
        bstraction_->clear();
      }
    }
    if (has_side()) {
      if (side_ != &::google::protobuf::internal::kEmptyString) {
        side_->clear();
      }
    }
    nquantity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    nlvsquantity_ = 0;
    if (has_bstrlogmessage()) {
      if (bstrlogmessage_ != &::google::protobuf::internal::kEmptyString) {
        bstrlogmessage_->clear();
      }
    }
    lmtprice_ = 0;
    if (has_bstruser()) {
      if (bstruser_ != &::google::protobuf::internal::kEmptyString) {
        bstruser_->clear();
      }
    }
    totalexecutedqty_ = 0;
    executedqty_ = 0;
    if (has_cust_cancelorderid()) {
      if (cust_cancelorderid_ != &::google::protobuf::internal::kEmptyString) {
        cust_cancelorderid_->clear();
      }
    }
    if (has_cust_ordercategory()) {
      if (cust_ordercategory_ != &::google::protobuf::internal::kEmptyString) {
        cust_ordercategory_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    pricetype_ = 0;
    if (has_tif()) {
      if (tif_ != &::google::protobuf::internal::kEmptyString) {
        tif_->clear();
      }
    }
    if (has_datetime()) {
      if (datetime_ != &::google::protobuf::internal::kEmptyString) {
        datetime_->clear();
      }
    }
    if (has_strategy()) {
      if (strategy_ != &::google::protobuf::internal::kEmptyString) {
        strategy_->clear();
      }
    }
    if (has_maturity()) {
      if (maturity_ != &::google::protobuf::internal::kEmptyString) {
        maturity_->clear();
      }
    }
    if (has_putcall()) {
      if (putcall_ != &::google::protobuf::internal::kEmptyString) {
        putcall_->clear();
      }
    }
    if (has_instrument()) {
      if (instrument_ != &::google::protobuf::internal::kEmptyString) {
        instrument_->clear();
      }
    }
    strikeprice_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_underlying()) {
      if (underlying_ != &::google::protobuf::internal::kEmptyString) {
        underlying_->clear();
      }
    }
    if (has_norderrecordid()) {
      if (norderrecordid_ != &::google::protobuf::internal::kEmptyString) {
        norderrecordid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CustROrder_ser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string bstrAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstraccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstraccount().data(), this->bstraccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bstrDestination;
        break;
      }

      // optional string bstrDestination = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrDestination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstrdestination()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstrdestination().data(), this->bstrdestination().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nOrderStatus;
        break;
      }

      // optional int32 nOrderStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOrderStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &norderstatus_)));
          set_has_norderstatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bstrSymbol;
        break;
      }

      // optional string bstrSymbol = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrSymbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstrsymbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstrsymbol().data(), this->bstrsymbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_bstrClOrderId;
        break;
      }

      // optional string bstrClOrderId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrClOrderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstrclorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstrclorderid().data(), this->bstrclorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bstrAction;
        break;
      }

      // optional string bstrAction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrAction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstraction()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstraction().data(), this->bstraction().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_Side;
        break;
      }

      // optional string Side = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side().data(), this->side().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_nQuantity;
        break;
      }

      // optional int32 nQuantity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nquantity_)));
          set_has_nquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_nLvsQuantity;
        break;
      }

      // optional int32 nLvsQuantity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLvsQuantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlvsquantity_)));
          set_has_nlvsquantity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bstrLogMessage;
        break;
      }

      // optional string bstrLogMessage = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrLogMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstrlogmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstrlogmessage().data(), this->bstrlogmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_LmtPrice;
        break;
      }

      // optional float LmtPrice = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_LmtPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lmtprice_)));
          set_has_lmtprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_bstrUser;
        break;
      }

      // optional string bstrUser = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bstrUser:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bstruser()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bstruser().data(), this->bstruser().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_TotalExecutedQty;
        break;
      }

      // optional int32 TotalExecutedQty = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalExecutedQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexecutedqty_)));
          set_has_totalexecutedqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_ExecutedQty;
        break;
      }

      // optional int32 ExecutedQty = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ExecutedQty:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &executedqty_)));
          set_has_executedqty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_cust_cancelOrderID;
        break;
      }

      // optional string cust_cancelOrderID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cust_cancelOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cust_cancelorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cust_cancelorderid().data(), this->cust_cancelorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_cust_orderCategory;
        break;
      }

      // optional string cust_orderCategory = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cust_orderCategory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cust_ordercategory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cust_ordercategory().data(), this->cust_ordercategory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_PriceType;
        break;
      }

      // optional .Serializable.CustROrder_ser.EPriceType PriceType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PriceType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Serializable::CustROrder_ser_EPriceType_IsValid(value)) {
            set_pricetype(static_cast< ::Serializable::CustROrder_ser_EPriceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(17, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_TIF;
        break;
      }

      // optional string TIF = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TIF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tif()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tif().data(), this->tif().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_DateTime;
        break;
      }

      // optional string DateTime = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetime().data(), this->datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_strategy;
        break;
      }

      // optional string strategy = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strategy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strategy().data(), this->strategy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_maturity;
        break;
      }

      // optional string maturity = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_maturity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_maturity()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->maturity().data(), this->maturity().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_putcall;
        break;
      }

      // optional string putcall = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_putcall:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_putcall()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->putcall().data(), this->putcall().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_instrument;
        break;
      }

      // optional string instrument = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instrument:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_instrument()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->instrument().data(), this->instrument().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_strikeprice;
        break;
      }

      // optional float strikeprice = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_strikeprice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &strikeprice_)));
          set_has_strikeprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_underlying;
        break;
      }

      // optional string underlying = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_underlying:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_underlying()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->underlying().data(), this->underlying().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_nOrderRecordId;
        break;
      }

      // optional string nOrderRecordId = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nOrderRecordId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_norderrecordid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->norderrecordid().data(), this->norderrecordid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CustROrder_ser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string bstrAccount = 1;
  if (has_bstraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstraccount().data(), this->bstraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bstraccount(), output);
  }

  // optional string bstrDestination = 2;
  if (has_bstrdestination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrdestination().data(), this->bstrdestination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bstrdestination(), output);
  }

  // optional int32 nOrderStatus = 3;
  if (has_norderstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->norderstatus(), output);
  }

  // optional string bstrSymbol = 4;
  if (has_bstrsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrsymbol().data(), this->bstrsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->bstrsymbol(), output);
  }

  // optional string bstrClOrderId = 5;
  if (has_bstrclorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrclorderid().data(), this->bstrclorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->bstrclorderid(), output);
  }

  // optional string bstrAction = 6;
  if (has_bstraction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstraction().data(), this->bstraction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bstraction(), output);
  }

  // optional string Side = 7;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->side(), output);
  }

  // optional int32 nQuantity = 8;
  if (has_nquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->nquantity(), output);
  }

  // optional int32 nLvsQuantity = 9;
  if (has_nlvsquantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->nlvsquantity(), output);
  }

  // optional string bstrLogMessage = 10;
  if (has_bstrlogmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrlogmessage().data(), this->bstrlogmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->bstrlogmessage(), output);
  }

  // optional float LmtPrice = 11;
  if (has_lmtprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lmtprice(), output);
  }

  // optional string bstrUser = 12;
  if (has_bstruser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstruser().data(), this->bstruser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->bstruser(), output);
  }

  // optional int32 TotalExecutedQty = 13;
  if (has_totalexecutedqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->totalexecutedqty(), output);
  }

  // optional int32 ExecutedQty = 14;
  if (has_executedqty()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->executedqty(), output);
  }

  // optional string cust_cancelOrderID = 15;
  if (has_cust_cancelorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cust_cancelorderid().data(), this->cust_cancelorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->cust_cancelorderid(), output);
  }

  // optional string cust_orderCategory = 16;
  if (has_cust_ordercategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cust_ordercategory().data(), this->cust_ordercategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->cust_ordercategory(), output);
  }

  // optional .Serializable.CustROrder_ser.EPriceType PriceType = 17;
  if (has_pricetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->pricetype(), output);
  }

  // optional string TIF = 18;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->tif(), output);
  }

  // optional string DateTime = 19;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->datetime(), output);
  }

  // optional string strategy = 20;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->strategy(), output);
  }

  // optional string maturity = 22;
  if (has_maturity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity().data(), this->maturity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->maturity(), output);
  }

  // optional string putcall = 23;
  if (has_putcall()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->putcall().data(), this->putcall().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->putcall(), output);
  }

  // optional string instrument = 24;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->instrument(), output);
  }

  // optional float strikeprice = 25;
  if (has_strikeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->strikeprice(), output);
  }

  // optional string underlying = 26;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->underlying(), output);
  }

  // optional string nOrderRecordId = 27;
  if (has_norderrecordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->norderrecordid().data(), this->norderrecordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->norderrecordid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CustROrder_ser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string bstrAccount = 1;
  if (has_bstraccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstraccount().data(), this->bstraccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bstraccount(), target);
  }

  // optional string bstrDestination = 2;
  if (has_bstrdestination()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrdestination().data(), this->bstrdestination().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bstrdestination(), target);
  }

  // optional int32 nOrderStatus = 3;
  if (has_norderstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->norderstatus(), target);
  }

  // optional string bstrSymbol = 4;
  if (has_bstrsymbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrsymbol().data(), this->bstrsymbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->bstrsymbol(), target);
  }

  // optional string bstrClOrderId = 5;
  if (has_bstrclorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrclorderid().data(), this->bstrclorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->bstrclorderid(), target);
  }

  // optional string bstrAction = 6;
  if (has_bstraction()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstraction().data(), this->bstraction().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bstraction(), target);
  }

  // optional string Side = 7;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->side(), target);
  }

  // optional int32 nQuantity = 8;
  if (has_nquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->nquantity(), target);
  }

  // optional int32 nLvsQuantity = 9;
  if (has_nlvsquantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->nlvsquantity(), target);
  }

  // optional string bstrLogMessage = 10;
  if (has_bstrlogmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstrlogmessage().data(), this->bstrlogmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->bstrlogmessage(), target);
  }

  // optional float LmtPrice = 11;
  if (has_lmtprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lmtprice(), target);
  }

  // optional string bstrUser = 12;
  if (has_bstruser()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bstruser().data(), this->bstruser().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->bstruser(), target);
  }

  // optional int32 TotalExecutedQty = 13;
  if (has_totalexecutedqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->totalexecutedqty(), target);
  }

  // optional int32 ExecutedQty = 14;
  if (has_executedqty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->executedqty(), target);
  }

  // optional string cust_cancelOrderID = 15;
  if (has_cust_cancelorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cust_cancelorderid().data(), this->cust_cancelorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->cust_cancelorderid(), target);
  }

  // optional string cust_orderCategory = 16;
  if (has_cust_ordercategory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cust_ordercategory().data(), this->cust_ordercategory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->cust_ordercategory(), target);
  }

  // optional .Serializable.CustROrder_ser.EPriceType PriceType = 17;
  if (has_pricetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      17, this->pricetype(), target);
  }

  // optional string TIF = 18;
  if (has_tif()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tif().data(), this->tif().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->tif(), target);
  }

  // optional string DateTime = 19;
  if (has_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetime().data(), this->datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->datetime(), target);
  }

  // optional string strategy = 20;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->strategy(), target);
  }

  // optional string maturity = 22;
  if (has_maturity()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->maturity().data(), this->maturity().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->maturity(), target);
  }

  // optional string putcall = 23;
  if (has_putcall()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->putcall().data(), this->putcall().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->putcall(), target);
  }

  // optional string instrument = 24;
  if (has_instrument()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->instrument().data(), this->instrument().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->instrument(), target);
  }

  // optional float strikeprice = 25;
  if (has_strikeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->strikeprice(), target);
  }

  // optional string underlying = 26;
  if (has_underlying()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->underlying().data(), this->underlying().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->underlying(), target);
  }

  // optional string nOrderRecordId = 27;
  if (has_norderrecordid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->norderrecordid().data(), this->norderrecordid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->norderrecordid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CustROrder_ser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string bstrAccount = 1;
    if (has_bstraccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstraccount());
    }

    // optional string bstrDestination = 2;
    if (has_bstrdestination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstrdestination());
    }

    // optional int32 nOrderStatus = 3;
    if (has_norderstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->norderstatus());
    }

    // optional string bstrSymbol = 4;
    if (has_bstrsymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstrsymbol());
    }

    // optional string bstrClOrderId = 5;
    if (has_bstrclorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstrclorderid());
    }

    // optional string bstrAction = 6;
    if (has_bstraction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstraction());
    }

    // optional string Side = 7;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side());
    }

    // optional int32 nQuantity = 8;
    if (has_nquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nquantity());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 nLvsQuantity = 9;
    if (has_nlvsquantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlvsquantity());
    }

    // optional string bstrLogMessage = 10;
    if (has_bstrlogmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstrlogmessage());
    }

    // optional float LmtPrice = 11;
    if (has_lmtprice()) {
      total_size += 1 + 4;
    }

    // optional string bstrUser = 12;
    if (has_bstruser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bstruser());
    }

    // optional int32 TotalExecutedQty = 13;
    if (has_totalexecutedqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexecutedqty());
    }

    // optional int32 ExecutedQty = 14;
    if (has_executedqty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->executedqty());
    }

    // optional string cust_cancelOrderID = 15;
    if (has_cust_cancelorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cust_cancelorderid());
    }

    // optional string cust_orderCategory = 16;
    if (has_cust_ordercategory()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cust_ordercategory());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Serializable.CustROrder_ser.EPriceType PriceType = 17;
    if (has_pricetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pricetype());
    }

    // optional string TIF = 18;
    if (has_tif()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tif());
    }

    // optional string DateTime = 19;
    if (has_datetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetime());
    }

    // optional string strategy = 20;
    if (has_strategy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy());
    }

    // optional string maturity = 22;
    if (has_maturity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->maturity());
    }

    // optional string putcall = 23;
    if (has_putcall()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->putcall());
    }

    // optional string instrument = 24;
    if (has_instrument()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->instrument());
    }

    // optional float strikeprice = 25;
    if (has_strikeprice()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string underlying = 26;
    if (has_underlying()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->underlying());
    }

    // optional string nOrderRecordId = 27;
    if (has_norderrecordid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->norderrecordid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CustROrder_ser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CustROrder_ser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CustROrder_ser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CustROrder_ser::MergeFrom(const CustROrder_ser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bstraccount()) {
      set_bstraccount(from.bstraccount());
    }
    if (from.has_bstrdestination()) {
      set_bstrdestination(from.bstrdestination());
    }
    if (from.has_norderstatus()) {
      set_norderstatus(from.norderstatus());
    }
    if (from.has_bstrsymbol()) {
      set_bstrsymbol(from.bstrsymbol());
    }
    if (from.has_bstrclorderid()) {
      set_bstrclorderid(from.bstrclorderid());
    }
    if (from.has_bstraction()) {
      set_bstraction(from.bstraction());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_nquantity()) {
      set_nquantity(from.nquantity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_nlvsquantity()) {
      set_nlvsquantity(from.nlvsquantity());
    }
    if (from.has_bstrlogmessage()) {
      set_bstrlogmessage(from.bstrlogmessage());
    }
    if (from.has_lmtprice()) {
      set_lmtprice(from.lmtprice());
    }
    if (from.has_bstruser()) {
      set_bstruser(from.bstruser());
    }
    if (from.has_totalexecutedqty()) {
      set_totalexecutedqty(from.totalexecutedqty());
    }
    if (from.has_executedqty()) {
      set_executedqty(from.executedqty());
    }
    if (from.has_cust_cancelorderid()) {
      set_cust_cancelorderid(from.cust_cancelorderid());
    }
    if (from.has_cust_ordercategory()) {
      set_cust_ordercategory(from.cust_ordercategory());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_pricetype()) {
      set_pricetype(from.pricetype());
    }
    if (from.has_tif()) {
      set_tif(from.tif());
    }
    if (from.has_datetime()) {
      set_datetime(from.datetime());
    }
    if (from.has_strategy()) {
      set_strategy(from.strategy());
    }
    if (from.has_maturity()) {
      set_maturity(from.maturity());
    }
    if (from.has_putcall()) {
      set_putcall(from.putcall());
    }
    if (from.has_instrument()) {
      set_instrument(from.instrument());
    }
    if (from.has_strikeprice()) {
      set_strikeprice(from.strikeprice());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_underlying()) {
      set_underlying(from.underlying());
    }
    if (from.has_norderrecordid()) {
      set_norderrecordid(from.norderrecordid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CustROrder_ser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustROrder_ser::CopyFrom(const CustROrder_ser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustROrder_ser::IsInitialized() const {

  return true;
}

void CustROrder_ser::Swap(CustROrder_ser* other) {
  if (other != this) {
    std::swap(bstraccount_, other->bstraccount_);
    std::swap(bstrdestination_, other->bstrdestination_);
    std::swap(norderstatus_, other->norderstatus_);
    std::swap(bstrsymbol_, other->bstrsymbol_);
    std::swap(bstrclorderid_, other->bstrclorderid_);
    std::swap(bstraction_, other->bstraction_);
    std::swap(side_, other->side_);
    std::swap(nquantity_, other->nquantity_);
    std::swap(nlvsquantity_, other->nlvsquantity_);
    std::swap(bstrlogmessage_, other->bstrlogmessage_);
    std::swap(lmtprice_, other->lmtprice_);
    std::swap(bstruser_, other->bstruser_);
    std::swap(totalexecutedqty_, other->totalexecutedqty_);
    std::swap(executedqty_, other->executedqty_);
    std::swap(cust_cancelorderid_, other->cust_cancelorderid_);
    std::swap(cust_ordercategory_, other->cust_ordercategory_);
    std::swap(pricetype_, other->pricetype_);
    std::swap(tif_, other->tif_);
    std::swap(datetime_, other->datetime_);
    std::swap(strategy_, other->strategy_);
    std::swap(maturity_, other->maturity_);
    std::swap(putcall_, other->putcall_);
    std::swap(instrument_, other->instrument_);
    std::swap(strikeprice_, other->strikeprice_);
    std::swap(underlying_, other->underlying_);
    std::swap(norderrecordid_, other->norderrecordid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CustROrder_ser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CustROrder_ser_descriptor_;
  metadata.reflection = CustROrder_ser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ROrderPosition::kPositionFieldNumber;
const int ROrderPosition::kExecutionPriceFieldNumber;
#endif  // !_MSC_VER

ROrderPosition::ROrderPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ROrderPosition::InitAsDefaultInstance() {
}

ROrderPosition::ROrderPosition(const ROrderPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ROrderPosition::SharedCtor() {
  _cached_size_ = 0;
  position_ = 0;
  execution_price_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ROrderPosition::~ROrderPosition() {
  SharedDtor();
}

void ROrderPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ROrderPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ROrderPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ROrderPosition_descriptor_;
}

const ROrderPosition& ROrderPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtypes_2eproto();
  return *default_instance_;
}

ROrderPosition* ROrderPosition::default_instance_ = NULL;

ROrderPosition* ROrderPosition::New() const {
  return new ROrderPosition;
}

void ROrderPosition::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = 0;
    execution_price_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ROrderPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_execution_price;
        break;
      }

      // optional float execution_price = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_execution_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &execution_price_)));
          set_has_execution_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ROrderPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->position(), output);
  }

  // optional float execution_price = 2;
  if (has_execution_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->execution_price(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ROrderPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->position(), target);
  }

  // optional float execution_price = 2;
  if (has_execution_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->execution_price(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ROrderPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }

    // optional float execution_price = 2;
    if (has_execution_price()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ROrderPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ROrderPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ROrderPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ROrderPosition::MergeFrom(const ROrderPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_execution_price()) {
      set_execution_price(from.execution_price());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ROrderPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROrderPosition::CopyFrom(const ROrderPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROrderPosition::IsInitialized() const {

  return true;
}

void ROrderPosition::Swap(ROrderPosition* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(execution_price_, other->execution_price_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ROrderPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ROrderPosition_descriptor_;
  metadata.reflection = ROrderPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TradeUpdate::kSymbolFieldNumber;
const int TradeUpdate::kClientIdFieldNumber;
const int TradeUpdate::kSideFieldNumber;
const int TradeUpdate::kVolumeFieldNumber;
const int TradeUpdate::kExecPriceFieldNumber;
const int TradeUpdate::kDateTimetimeFieldNumber;
#endif  // !_MSC_VER

TradeUpdate::TradeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TradeUpdate::InitAsDefaultInstance() {
}

TradeUpdate::TradeUpdate(const TradeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TradeUpdate::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  volume_ = 0;
  exec_price_ = 0;
  datetimetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TradeUpdate::~TradeUpdate() {
  SharedDtor();
}

void TradeUpdate::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (client_id_ != &::google::protobuf::internal::kEmptyString) {
    delete client_id_;
  }
  if (side_ != &::google::protobuf::internal::kEmptyString) {
    delete side_;
  }
  if (datetimetime_ != &::google::protobuf::internal::kEmptyString) {
    delete datetimetime_;
  }
  if (this != default_instance_) {
  }
}

void TradeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TradeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TradeUpdate_descriptor_;
}

const TradeUpdate& TradeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtypes_2eproto();
  return *default_instance_;
}

TradeUpdate* TradeUpdate::default_instance_ = NULL;

TradeUpdate* TradeUpdate::New() const {
  return new TradeUpdate;
}

void TradeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    if (has_client_id()) {
      if (client_id_ != &::google::protobuf::internal::kEmptyString) {
        client_id_->clear();
      }
    }
    if (has_side()) {
      if (side_ != &::google::protobuf::internal::kEmptyString) {
        side_->clear();
      }
    }
    volume_ = 0;
    exec_price_ = 0;
    if (has_datetimetime()) {
      if (datetimetime_ != &::google::protobuf::internal::kEmptyString) {
        datetimetime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TradeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_client_id;
        break;
      }

      // optional string client_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_side;
        break;
      }

      // optional string side = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_side:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_side()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->side().data(), this->side().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_volume;
        break;
      }

      // optional int32 volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_exec_price;
        break;
      }

      // optional float exec_price = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_exec_price:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exec_price_)));
          set_has_exec_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_DateTimetime;
        break;
      }

      // optional string DateTimetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DateTimetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datetimetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datetimetime().data(), this->datetimetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TradeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional string client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->client_id(), output);
  }

  // optional string side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->side(), output);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->volume(), output);
  }

  // optional float exec_price = 5;
  if (has_exec_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->exec_price(), output);
  }

  // optional string DateTimetime = 6;
  if (has_datetimetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetimetime().data(), this->datetimetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->datetimetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TradeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional string client_id = 2;
  if (has_client_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->client_id(), target);
  }

  // optional string side = 3;
  if (has_side()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->side().data(), this->side().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->side(), target);
  }

  // optional int32 volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->volume(), target);
  }

  // optional float exec_price = 5;
  if (has_exec_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->exec_price(), target);
  }

  // optional string DateTimetime = 6;
  if (has_datetimetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datetimetime().data(), this->datetimetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->datetimetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TradeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional string client_id = 2;
    if (has_client_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_id());
    }

    // optional string side = 3;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->side());
    }

    // optional int32 volume = 4;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional float exec_price = 5;
    if (has_exec_price()) {
      total_size += 1 + 4;
    }

    // optional string DateTimetime = 6;
    if (has_datetimetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datetimetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TradeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TradeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TradeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TradeUpdate::MergeFrom(const TradeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_client_id()) {
      set_client_id(from.client_id());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_exec_price()) {
      set_exec_price(from.exec_price());
    }
    if (from.has_datetimetime()) {
      set_datetimetime(from.datetimetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TradeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeUpdate::CopyFrom(const TradeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeUpdate::IsInitialized() const {

  return true;
}

void TradeUpdate::Swap(TradeUpdate* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(client_id_, other->client_id_);
    std::swap(side_, other->side_);
    std::swap(volume_, other->volume_);
    std::swap(exec_price_, other->exec_price_);
    std::swap(datetimetime_, other->datetimetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TradeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TradeUpdate_descriptor_;
  metadata.reflection = TradeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RUpdatePacket::kCustOrdFieldNumber;
const int RUpdatePacket::kPosFieldNumber;
const int RUpdatePacket::kTupdateFieldNumber;
#endif  // !_MSC_VER

RUpdatePacket::RUpdatePacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RUpdatePacket::InitAsDefaultInstance() {
  custord_ = const_cast< ::Serializable::CustROrder_ser*>(&::Serializable::CustROrder_ser::default_instance());
  pos_ = const_cast< ::Serializable::ROrderPosition*>(&::Serializable::ROrderPosition::default_instance());
  tupdate_ = const_cast< ::Serializable::TradeUpdate*>(&::Serializable::TradeUpdate::default_instance());
}

RUpdatePacket::RUpdatePacket(const RUpdatePacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RUpdatePacket::SharedCtor() {
  _cached_size_ = 0;
  custord_ = NULL;
  pos_ = NULL;
  tupdate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RUpdatePacket::~RUpdatePacket() {
  SharedDtor();
}

void RUpdatePacket::SharedDtor() {
  if (this != default_instance_) {
    delete custord_;
    delete pos_;
    delete tupdate_;
  }
}

void RUpdatePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RUpdatePacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RUpdatePacket_descriptor_;
}

const RUpdatePacket& RUpdatePacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtypes_2eproto();
  return *default_instance_;
}

RUpdatePacket* RUpdatePacket::default_instance_ = NULL;

RUpdatePacket* RUpdatePacket::New() const {
  return new RUpdatePacket;
}

void RUpdatePacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_custord()) {
      if (custord_ != NULL) custord_->::Serializable::CustROrder_ser::Clear();
    }
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Serializable::ROrderPosition::Clear();
    }
    if (has_tupdate()) {
      if (tupdate_ != NULL) tupdate_->::Serializable::TradeUpdate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RUpdatePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Serializable.CustROrder_ser custOrd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // optional .Serializable.ROrderPosition pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tupdate;
        break;
      }

      // optional .Serializable.TradeUpdate tupdate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tupdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tupdate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RUpdatePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Serializable.CustROrder_ser custOrd = 1;
  if (has_custord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->custord(), output);
  }

  // optional .Serializable.ROrderPosition pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(), output);
  }

  // optional .Serializable.TradeUpdate tupdate = 3;
  if (has_tupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tupdate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RUpdatePacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Serializable.CustROrder_ser custOrd = 1;
  if (has_custord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->custord(), target);
  }

  // optional .Serializable.ROrderPosition pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(), target);
  }

  // optional .Serializable.TradeUpdate tupdate = 3;
  if (has_tupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tupdate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RUpdatePacket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Serializable.CustROrder_ser custOrd = 1;
    if (has_custord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->custord());
    }

    // optional .Serializable.ROrderPosition pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

    // optional .Serializable.TradeUpdate tupdate = 3;
    if (has_tupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tupdate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RUpdatePacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RUpdatePacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RUpdatePacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RUpdatePacket::MergeFrom(const RUpdatePacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_custord()) {
      mutable_custord()->::Serializable::CustROrder_ser::MergeFrom(from.custord());
    }
    if (from.has_pos()) {
      mutable_pos()->::Serializable::ROrderPosition::MergeFrom(from.pos());
    }
    if (from.has_tupdate()) {
      mutable_tupdate()->::Serializable::TradeUpdate::MergeFrom(from.tupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RUpdatePacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RUpdatePacket::CopyFrom(const RUpdatePacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RUpdatePacket::IsInitialized() const {

  return true;
}

void RUpdatePacket::Swap(RUpdatePacket* other) {
  if (other != this) {
    std::swap(custord_, other->custord_);
    std::swap(pos_, other->pos_);
    std::swap(tupdate_, other->tupdate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RUpdatePacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RUpdatePacket_descriptor_;
  metadata.reflection = RUpdatePacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtraRFields::kFormIDFieldNumber;
const int ExtraRFields::kOrderTypeFieldNumber;
#endif  // !_MSC_VER

ExtraRFields::ExtraRFields()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtraRFields::InitAsDefaultInstance() {
}

ExtraRFields::ExtraRFields(const ExtraRFields& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtraRFields::SharedCtor() {
  _cached_size_ = 0;
  formid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ordertype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtraRFields::~ExtraRFields() {
  SharedDtor();
}

void ExtraRFields::SharedDtor() {
  if (formid_ != &::google::protobuf::internal::kEmptyString) {
    delete formid_;
  }
  if (ordertype_ != &::google::protobuf::internal::kEmptyString) {
    delete ordertype_;
  }
  if (this != default_instance_) {
  }
}

void ExtraRFields::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtraRFields::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtraRFields_descriptor_;
}

const ExtraRFields& ExtraRFields::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rtypes_2eproto();
  return *default_instance_;
}

ExtraRFields* ExtraRFields::default_instance_ = NULL;

ExtraRFields* ExtraRFields::New() const {
  return new ExtraRFields;
}

void ExtraRFields::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_formid()) {
      if (formid_ != &::google::protobuf::internal::kEmptyString) {
        formid_->clear();
      }
    }
    if (has_ordertype()) {
      if (ordertype_ != &::google::protobuf::internal::kEmptyString) {
        ordertype_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtraRFields::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string FormID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_formid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->formid().data(), this->formid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_OrderType;
        break;
      }

      // optional string OrderType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OrderType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ordertype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ordertype().data(), this->ordertype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtraRFields::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string FormID = 1;
  if (has_formid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formid().data(), this->formid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->formid(), output);
  }

  // optional string OrderType = 2;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ordertype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtraRFields::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string FormID = 1;
  if (has_formid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->formid().data(), this->formid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->formid(), target);
  }

  // optional string OrderType = 2;
  if (has_ordertype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ordertype().data(), this->ordertype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->ordertype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtraRFields::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string FormID = 1;
    if (has_formid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->formid());
    }

    // optional string OrderType = 2;
    if (has_ordertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ordertype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtraRFields::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtraRFields* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtraRFields*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtraRFields::MergeFrom(const ExtraRFields& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_formid()) {
      set_formid(from.formid());
    }
    if (from.has_ordertype()) {
      set_ordertype(from.ordertype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtraRFields::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtraRFields::CopyFrom(const ExtraRFields& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraRFields::IsInitialized() const {

  return true;
}

void ExtraRFields::Swap(ExtraRFields* other) {
  if (other != this) {
    std::swap(formid_, other->formid_);
    std::swap(ordertype_, other->ordertype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtraRFields::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtraRFields_descriptor_;
  metadata.reflection = ExtraRFields_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Serializable

// @@protoc_insertion_point(global_scope)
